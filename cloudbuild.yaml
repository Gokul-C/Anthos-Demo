steps:
# Docker Build
- name: 'gcr.io/cloud-builders/docker'
  id: Docker Build
  args: ['build', '-t', 'gcr.io/hpe-managed-services/anthos-ci:$COMMIT_SHA', '.']
  
# Docker Push
- name: 'gcr.io/cloud-builders/docker'
  id: Docker Push to GCP Repository
  args: ['push', 'gcr.io/hpe-managed-services/anthos-ci:$COMMIT_SHA']
  
# Docker Image Scan
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  id: 'Docker Image Scan'
  args:
    - '-c'
    - 'output_variable=$(gcloud artifacts docker images scan gcr.io/hpe-managed-services/anthos-ci:$COMMIT_SHA --remote | grep -oP "scan: projects/hpe-managed-services/locations/us/scans/\\K\\S+")'
    - 'sleep 15s'
    - 'echo "output_variable: ${output_variable}"'
    - 'echo ${output_variable}'
    - 'echo ::set-env name=output_variable::${output_variable}'
    
    
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
    - '-c'
    - 'echo "Retrieved value from previous step: $output_variable"'
    
#Deploy to Anthos K8S cluster
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: bash
  id: Deploy to Anthos K8S cluster
  args:
  - '-c'
  - |
    set -x && \
    export KUBECONFIG="$(pwd)/gateway-kubeconfig" && \
    gcloud container fleet memberships get-credentials hybrid-cluster-01
    kubectl apply -f namespace.yaml
    kubectl apply -f  deployment.yaml -n anthos-ci
    kubectl set image deploy/my-app my-app=gcr.io/hpe-managed-services/anthos-ci:$COMMIT_SHA -n anthos-ci
    kubectl apply -f   service.yaml -n anthos-ci