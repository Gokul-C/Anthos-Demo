steps:
  # Source Code Scan with SonarQube
- name: 'gcr.io/$PROJECT_ID/sonar-scanner'
  id: Source Code Scan with SonarQube
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      export SONAR_TOKEN=d9ccc9c180b3a11cd216dec7b698042f4857b127
      sonar-scanner   -Dsonar.organization=anthos-demo   -Dsonar.projectKey=anthos-demo_anthos-demo  -Dsonar.sources=.   -Dsonar.host.url=https://sonarcloud.io

# Docker Build
- name: 'gcr.io/cloud-builders/docker'
  id: Docker Build
  args: ['build', '-t', 'gcr.io/hpe-managed-services/anthos-ci:$COMMIT_SHA', '.']
  
    
# Docker Push
- name: 'gcr.io/cloud-builders/docker'
  id: Docker Push to GCP Repository
  args: ['push', 'gcr.io/hpe-managed-services/anthos-ci:$COMMIT_SHA']
  

# Docker Image Scan
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  id: 'Docker Image Scan'
  args:
    - '-c'
    - |
      export output_variable=$(gcloud artifacts docker images scan gcr.io/hpe-managed-services/anthos-ci:$COMMIT_SHA --remote | grep -oP "scan: projects/hpe-managed-services/locations/us/scans/\\K\\S+")
      sleep 15s
      #export output_variable=$(output_variable)
      echo $$output_variable
      echo $$output_variable > /workspace/myvalue
      export output_variable=$(cat /workspace/myvalue)
      echo $$output_variable
      gcloud artifacts docker images list-vulnerabilities  projects/hpe-managed-services/locations/us/scans/$$output_variable --limit=100  

#Sign the Image
- id: 'create-attestation'
  name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: /bin/bash
  args:
      - -c
      - |
        gcloud beta container binauthz attestations sign-and-create \
        --project="hpe-managed-services" \
        --artifact-url="gcr.io/hpe-managed-services/anthos-ci:$IMAGE_NAME" \
        --attestor="admin-attestor" \
        --attestor-project="hpe-managed-services" \
        --keyversion-project="hpe-managed-services" \
        --keyversion-location="global" \
        --keyversion-keyring="demokeyring" \
        --keyversion-key="binary-auth" \
        --keyversion="1"
    
#Deploy to Anthos K8S cluster
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: bash
  id: Deploy to Anthos K8S cluster
  args:
  - '-c'
  - |
    set -x && \
    export KUBECONFIG="$(pwd)/gateway-kubeconfig" && \
    gcloud container fleet memberships get-credentials hubcluster
    kubectl apply -f namespace.yaml
    kubectl apply -f  deployment.yaml -n anthos-ci
    kubectl set image deploy/my-app my-app=gcr.io/hpe-managed-services/anthos-ci:$COMMIT_SHA -n anthos-ci
    kubectl apply -f   service.yaml -n anthos-ci
